// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           Int   @id @default(autoincrement()) 
  firstName    String   @db.VarChar(50)
  middleName   String   @db.VarChar(50)
  lastName     String   @db.VarChar(50)
  mobile       String   @db.VarChar(15)
  email        String   @unique(map: "users_email_unique") @db.VarChar(50)
  passwordHash String   @db.VarChar(32)
  registeredAT DateTime @default(now()) @db.Timestamp(0)
  lastLogin    DateTime @default(now()) @db.Timestamp(0)
  intro        String?  @db.TinyText
  profile      String?  @db.Text
  post post[]
}

model post {
  id            Int          @id @default(autoincrement())
  authorId      Int         
  user          user            @relation(fields: [authorId], references: [id])
  children      post[]          @relation("ParentToChildren")
  post          post            @relation("ParentToChildren", fields: [parentId], references: [id])
  parentId      Int         
  title         String          @db.VarChar(75)
  metaTitle     String          @db.VarChar(100)
  slug          String          @db.VarChar(100)
  summary       String          @db.TinyText
  published     Int             @db.TinyInt
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  publishedAt   DateTime?       @db.Timestamp(0)
  content       String          @db.Text
  post_comment  post_comment[]
  post_tag      post_tag[]
  post_meta     post_meta[]
  post_category post_category[]
}

model post_comment {
  id           Int         @id @default(autoincrement())
  postId       Int        
  post         post           @relation(fields: [postId], references: [id])
  children     post_comment[] @relation("ParentToChildren")
  post_comment post_comment   @relation("ParentToChildren", fields: [parentId], references: [id])
  parentId     Int        
  title        String         @db.VarChar(100)
  published    Int            @db.TinyInt
  created_at   DateTime?      @db.Timestamp(0)
  publishedAt  DateTime?      @db.Timestamp(0)
  content      String         @db.Text
}

model tag {
  id        Int     @id @default(autoincrement())
  title     String     @db.VarChar(75)
  metaTitle String     @db.VarChar(100)
  slug      String     @db.VarChar(100)
  content   String     @db.Text
  post_tag  post_tag[]
}

model post_tag {
  id     Int @id @default(autoincrement())
  postId Int
  post   post   @relation(fields: [postId], references: [id])
  tagId  Int
  tag    tag    @relation(fields: [tagId], references: [id])
}

model post_meta {
  id      Int @id @default(autoincrement())
  postId  Int
  post    post   @relation(fields: [postId], references: [id])
  slug    String @db.VarChar(50)
  content String @db.Text
}

model category {
  id            Int          @id @default(autoincrement())
  children      category[]      @relation("ParentToChildren")
  post_comment  category        @relation("ParentToChildren", fields: [parentId], references: [id])
  parentId      Int         
  title         String          @db.VarChar(75)
  metaTitle     String          @db.VarChar(100)
  slug          String          @db.VarChar(100)
  content       String          @db.Text
  post_category post_category[]
}

model post_category {
  id         Int   @id @default(autoincrement())
  postId     Int  
  post       post     @relation(fields: [postId], references: [id])
  categoryId Int  
  category   category @relation(fields: [categoryId], references: [id])
}
